"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Button = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const classnames_1 = __importDefault(require("classnames"));
const react_1 = require("react");
const mergeDeep_1 = require("../../helpers/mergeDeep");
const ThemeContext_1 = require("../Flowbite/ThemeContext");
const ButtonGroup_1 = __importDefault(require("./ButtonGroup"));
const ButtonComponent = (0, react_1.forwardRef)(({ children, className, color = 'info', disabled = false, fullSized, gradientDuoTone, gradientMonochrome, href, label, outline = false, pill = false, positionInGroup = 'none', size = 'md', theme: customTheme = {}, ...props }, ref) => {
    const { buttonGroup: groupTheme, button: theme } = (0, mergeDeep_1.mergeDeep)((0, ThemeContext_1.useTheme)().theme, customTheme);
    const isLink = typeof href !== 'undefined';
    const Component = isLink ? 'a' : 'button';
    const theirProps = props;
    return ((0, jsx_runtime_1.jsx)(Component, { disabled: disabled, href: href, type: isLink ? undefined : 'button', ref: ref, className: (0, classnames_1.default)(disabled && theme.disabled, !gradientDuoTone && !gradientMonochrome && theme.color[color], gradientDuoTone && !gradientMonochrome && theme.gradientDuoTone[gradientDuoTone], !gradientDuoTone && gradientMonochrome && theme.gradient[gradientMonochrome], groupTheme.position[positionInGroup], outline && (theme.outline.color[color] ?? theme.outline.color.default), theme.base, theme.pill[pill ? 'on' : 'off'], fullSized && theme.fullSized, className), ...theirProps, children: (0, jsx_runtime_1.jsx)("span", { className: (0, classnames_1.default)(theme.inner.base, theme.inner.position[positionInGroup], theme.outline[outline ? 'on' : 'off'], theme.outline.pill[outline && pill ? 'on' : 'off'], theme.size[size], outline && !theme.outline.color[color] && theme.inner.outline), children: (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [typeof children !== 'undefined' && children, typeof label !== 'undefined' && ((0, jsx_runtime_1.jsx)("span", { "data-testid": "flowbite-button-label", className: theme.label, children: label }))] }) }) }));
});
ButtonComponent.displayName = 'Button';
exports.Button = Object.assign(ButtonComponent, {
    Group: ButtonGroup_1.default,
});
